<?php

/**
 * Copyright 2023 Ing. Tomas Kracik (Vespotok)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @package     Kernel
 * @subpackage  KernelObjects
 * @author      Vespotok veDev - Tomáš Kracík <kracik@vespotok.net>
 */

namespace Fujin\Kernel;

use Exception;
use Fujin\Kernel\Obj\KernelObject;
use Fujin\Kernel\Obj\Task;

/**
 * Class Scheduler
 *
 * Represents a scheduler in the Fujin Kernel.
 */
class Scheduler extends KernelObject
{
    /**
     * The name of the Scheduler kernel object.
     */
    const KERNEL_OBJECT_NAME = "Scheduler";

    /**
     * The version of the Scheduler kernel object.
     */
    const KERNEL_OBJECT_VERSION = "1.0";

    /**
     * The type of the Scheduler kernel object.
     */
    const KERNEL_OBJECT_TYPE = "KoTypeVoluntary";

    /**
     * The path of the Scheduler kernel object.
     */
    const KERNEL_OBJECT_PATH = "/kernel/scheduler.ko";

    /**
     * Default constants for process ID registration.
     */
    private const INIT_PID = 1;
    private const KERNEL_TASK_PID = 900;
    private const FOREGROUND_PID_START = 2;
    private const FOREGROUND_PID_END = 899;
    private const BACKGROUND_PID_START = 901;
    private const BACKGROUND_PID_END = 999;
    private const INIT_NAME = "Init";
    private const INIT_ICON = FUJIN_PATH . "/usr/share/identity/favicon-32x32.png";
    private const KERNEL_NAME = "FujinKernel";
    private const KERNEL_ICON = FUJIN_PATH . "/usr/share/identity/favicon-32x32.png";

    /**
     * Scheduler constructor.
     *
     * @param Fujin $kernel The Fujin kernel instance.
     */
    public function __construct(Fujin $kernel)
    {
        $this->kernel = $kernel;

        $this->kernel->init_var([], 'tasks');
        $this->kernel->init_var([], 'tasks_shadow');
        $this->kernel->init_var('stdout', 'current_display');
        
        if (!$kernel->get_var('tasks', self::INIT_PID) || !$kernel->get_var('tasks_shadow', self::INIT_PID)) {
            $init = new Task("/bin/fjsysd", "-i", 0, "root");
            $init->set_name(self::INIT_NAME);
            $init->set_meta(array(
                "name" => self::INIT_NAME,
                "icon" => self::INIT_ICON,
                "type" => "initdaemon"
            ));
            $this->register_task($init);

            $kernel = new Task("/kernel/fujin.kernel", "", 1001, "root");
            $kernel->set_meta(array(
                "name" => self::KERNEL_NAME,
                "icon" => self::KERNEL_ICON,
                "type" => "kernel"
            ));
            $kernel->set_name(self::KERNEL_NAME);
            $this->register_task($kernel);
        }

        if (!$this->kernel->get_var('current_task'))
            $this->kernel->put_var(1, 'current_task');

        //if (!array_key_exists($this->kernel->get_var('current_task'), $this->kernel->get_var('tasks')))
        //    $this->kernel->put_var(1, 'current_task');
    }

    /**
     * Invoke a process with the given task and arguments.
     *
     * @param Task|null $task The task to invoke, or null to invoke the current task.
     * @param string $args The arguments to pass to the task.
     * @throws Exception If the task does not exist or the executable is not found.
     */
    public function invoke_process(Task|null $task = null, string $args = null): void
    {
        //var_dump($this->kernel->get_var('tasks', (string)$this->kernel->get_var('current_task', $this->kernel->get_var('current_display'))));
        //exit;
        // If the task is null, invoke the current task (mostly bad practice)
        if ($task == null) {
            if ($this->kernel->get_var('tasks', $this->kernel->get_var('current_task', $this->kernel->get_var('current_display')))) {
                $task = $this->get_task($this->kernel->get_var('current_task', $this->kernel->get_var('current_display')));
            } else {
                $task = $this->get_task(1);
            }
        }

        // Check the validity of the called task
        if (!key_exists($task->__task_pid, $this->kernel->get_var('tasks'))) {
            throw new Exception("This task (". $task->__task_pid .") does not exist!");
        }

        // Check arguments/message sent
        if ($args == null) {
            $args = $task->get_args();
        }

        // Invocation process
        $exec_path = FUJIN_ROOT . $task->get_command();

        // Check the validity of the executable
        if (!is_file($exec_path)) {
            throw new Exception("This executable does not exist!");
        }

        $exec_name = $task->get_classname();
        $exec_nssp = $this->extract_namespace($exec_path);
        $exec_clsn = str_replace(' ', '', $exec_nssp . '\ ' . $exec_name);
        include($exec_path);
        $exec_runt = new $exec_clsn($task);
        $exec_runt->handle($args);
    }

    /**
     * Register a task.
     *
     * @param Task $task The task to register.
     * @return bool True if the task was successfully registered, false otherwise.
     */
    public function register_task(Task $task): bool
    {
        $pid = $this->generate_new_pid($task->get_type());
        $result = $task->set_pid($pid);
        $this->kernel->put_var($task->__serialize(), 'tasks', $pid);
        $this->kernel->put_var(serialize($task), 'tasks_shadow', $pid);
        $this->kernel->put_var($task->__task_pid, 'current_task', $task->get_display());
        return $result;
    }

    /**
     * Kill a task.
     *
     * @param Task $task The task to kill.
     * @return bool True if the task was killed, false if it's the initial task (PID 1).
     */
    public function kill_task(Task $task): bool
    {
        if ($task->__task_pid != 1) {
            $callback = $task->get_parent();
            $display = $task->get_display();
            $this->kernel->kill_var('tasks', $task->__task_pid);
            $this->kernel->kill_var('tasks_shadow', $task->__task_pid);
            $parent = $this->get_task($callback);
            $parent->set_args('');
            $this->kernel->put_var($callback, 'current_task', $display);
            $this->save_task_state($parent);
            return true;
        } else {
            return false;
        }
    }

    /**
     * Save the state of a task.
     *
     * @param Task $task The task to save the state for.
     */
    public function save_task_state(Task $task): void
    {
        $this->kernel->put_var($task->__serialize(), 'tasks', $task->__task_pid);
        $this->kernel->put_var(serialize($task), 'tasks_shadow', $task->__task_pid);
    }

    /**
     * Get a task by its process ID.
     *
     * @param int $process_id The process ID of the task to retrieve.
     * @return Task The retrieved task.
     */
    public function get_task(int $process_id): Task
    {
        return unserialize($this->kernel->get_var('tasks_shadow',$process_id));
    }

    /**
     * Get a task by its binary name and display.
     *
     * @param string $bin The binary name of the task.
     * @param string|null $display The display name of the task (optional).
     * @return Task|bool The retrieved task or false if not found.
     */
    public function get_task_by_bin(string $bin, string|null $display = null): Task|bool
    {
        $process_id = 0;
        foreach ($this->kernel->get_var('tasks') as $item) {
            if ($display == null) {
                if ($item['bin'] == $bin) {
                    $process_id = $item['pid'];
                }
            } else {
                if ($item['bin'] == $bin && $item['display'] == $display) {
                    $process_id = $item['pid'];
                }
            }
        }

        if ($process_id != 0)
            return $this->get_task($process_id);

        return false;
    }

    /**
     * Generate a new process ID based on the type.
     *
     * @param int $type The type of the task.
     * @return int The generated process ID.
     */
    private function generate_new_pid(int $type): int
    {
        $process_id_array = array();
        foreach ($this->kernel->get_var('tasks') as $item) {
            $process_id_array[] = $item['pid'];
        }

        switch ($type) {
            case 0:
                $start_process_id = self::FOREGROUND_PID_START;
                $end_process_id = self::FOREGROUND_PID_END;
                break;
            case 1:
                $start_process_id = self::BACKGROUND_PID_START;
                $end_process_id = self::BACKGROUND_PID_END;
                break;
            case 2:
                $start_process_id = self::INIT_PID;
                $end_process_id = self::INIT_PID;
                break;
            case 3:
                $start_process_id = self::KERNEL_TASK_PID;
                $end_process_id = self::KERNEL_TASK_PID;
                break;
            default:
                $start_process_id = self::FOREGROUND_PID_START;
                $end_process_id = self::FOREGROUND_PID_END;
                break;
        }

        for ($i = $start_process_id; $i <= $end_process_id; $i++) {
            if (!in_array($i, $process_id_array)) {
                return $i;
            }
        }

        return 1000;
    }

    /**
     * Extract the namespace from a file.
     *
     * @param string $file The file from which to extract the namespace.
     * @return string The extracted namespace.
     */
    private function extract_namespace(string $file): string
    {
        if (!$this->kernel->get_var('namespace_cache', $file))
        {
            $ns = NULL;
            $handle = fopen($file, 'r');

            if ($handle) {
                while (($line = fgets($handle)) !== false) {
                    if (strpos($line, 'namespace') === 0) {
                        $parts = explode(' ', $line);
                        $ns = rtrim(trim($parts[1]), ';');
                        break;
                    }
                }
                fclose($handle);
            }

            $this->kernel->put_var($ns, 'namespace_cache', $file);
            return $ns;
        }

        return $this->kernel->get_var('namespace_cache', $file);
    }
}
