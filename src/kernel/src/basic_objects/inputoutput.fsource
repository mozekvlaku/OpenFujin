<?php

/**
 * Copyright 2023 Ing. Tomas Kracik (Vespotok)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @package     Kernel
 * @subpackage  KernelObjects
 * @author      Vespotok veDev - TomÃ¡Å¡ KracÃ­k <kracik@vespotok.net>
 */

namespace Fujin\Kernel;

use Fujin\Kernel\Obj\KernelObject;

/**
 * Class IO
 *
 * Represents Input/Output operations in the Fujin Kernel.
 */
class IO extends KernelObject
{
    /**
     * The name of the IO kernel object.
     */
    const KERNEL_OBJECT_NAME = "IO";

    /**
     * The version of the IO kernel object.
     */
    const KERNEL_OBJECT_VERSION = "1.0";

    /**
     * The type of the IO kernel object.
     */
    const KERNEL_OBJECT_TYPE = "KoTypeObligatory";

    /**
     * The path of the IO kernel object.
     */
    const KERNEL_OBJECT_PATH = "/kernel/io.ko";

    /**
     * The newline character used for printing.
     */
    private const NEWLINE = "\n";

    private string $current_display;

    public function set_display(string $display) : void {
        $this->kernel->put_var($display, 'current_display');
        $this->current_display = $display;
    }

    /**
     * Prints a message to the tty display followed by a newline.
     *
     * @param mixed $message The message to print.
     * @return void
     */
    public function println(mixed $message = ""): void
    {
        $this->std_out($message . self::NEWLINE, "tty$");
    }

    /**
     * Prints a message to the tty display.
     *
     * @param mixed $message The message to print.
     * @return void
     */
    public function print(mixed $message): void
    {
        $this->std_out($message, "tty$");
    }

    /**
     * Shows graphical content to the jsd display.
     *
     * @param mixed $content The content to display.
     * @param bool $return_json If true, the content is in JSON format.
     * @return void
     */
    public function gdi_print(mixed $content, bool $return_json = true): void
    {
        if ($return_json) {
            $this->std_out(json_encode($content), "jsd$");
        } else {
            $this->std_out($content, "jsd$");
        }
    }

    /**
     * Returns an API message.
     *
     * @param mixed $content The content to return.
     * @param bool $return_json If true, the content is in JSON format.
     * @return void
     */
    public function cgi_print(mixed $content, bool $return_json = true): void
    {
        if ($return_json) {
            $this->std_out(json_encode($content), "apd$");
        } else {
            $this->std_out($content, "apd$");
        }
    }

    /**
     * Sets the prompt.
     *
     * @param string $prompt The prompt to set.
     * @return void
     */
    public function setprompt(string $prompt): void
    {
        $this->kernel->put_var($prompt, 'prompt', $this->scope_task->__task_pid);
    }

    /**
     * Gets the prompt.
     *
     * @return string
     */
    public function getprompt(): string
    {
        if($this->kernel->get_var('prompt', $this->scope_task->__task_pid))
        return $this->kernel->get_var('prompt', $this->scope_task->__task_pid);

        return '';
    }

    /**
     * Standard Out.
     *
     * @param mixed $message The message to output.
     * @param string $display_mask The display mask to check the current display against.
     * @return void
     */
    private function std_out(string $message, string $display_mask): void
    {
        if (substr($this->current_display, 0, 3) == substr($display_mask, 0, 3)) {
            echo $this->rewrite_environment($message);
        }
    }

    /**
     * Standard Error.
     *
     * @param string $message The error message to display.
     * @return void
     */
    public function std_err(string $message): void
    {
        if ($_SESSION['fjx_error_reporting'] == 'snatch') {
            echo '%ERR_MESSAGE%' . $this->rewrite_environment($message) . '%ERR_MESSAGE%';
        } else {
            if (substr($this->current_display, 0, 3) == "tty") {
                echo '[31m' . $this->rewrite_environment($message) . '[39m';
            } else {
                echo 'Error:' . $this->rewrite_environment($message);
            }
        }
    }

    /**
     * Rewrites environment variables in the provided message.
     *
     * @param string $stdin The message to rewrite.
     * @return string The rewritten message.
     */
    private function rewrite_environment(string $stdin): string
    {
        $variables = array(
            "HOME" => HOME,
            "USER" => USER,
            "DATE" => date("l jS \of F Y h:i:s A"),
            "USERNAME" => FULLNAME,
            "USERFIRSTNAME" => FIRSTNAME,
            "VER" => VER,
            "PATH" => implode(",", json_decode(file_get_contents(FUJIN_ROOT . "/etc/environment.fjconf"))->path)
        );

        foreach ($variables as $key => $val) {
            $pattern = '/\$' . $key . '\b/i';
            $stdin = preg_replace($pattern, $val, $stdin);
        }

        return $stdin;
    }
}
