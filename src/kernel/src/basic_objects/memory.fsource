<?php

/**
 * Copyright 2023 Ing. Tomas Kracik (Vespotok)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @package     Kernel
 * @subpackage  KernelObjects
 * @author      Vespotok veDev - Tomáš Kracík <kracik@vespotok.net>
 */

namespace Fujin\Kernel;

use Fujin\Kernel\Obj\KernelObject;

/**
 * Class Mem
 *
 * Represents a Memory Registry Controller in the Fujin Kernel.
 */
class Mem extends KernelObject
{
    /**
     * The name of the Memory Registry Controller kernel object.
     */
    const KERNEL_OBJECT_NAME = "MemoryRegistryController";

    /**
     * The version of the Memory Registry Controller kernel object.
     */
    const KERNEL_OBJECT_VERSION = "1.0";

    /**
     * The type of the Memory Registry Controller kernel object.
     */
    const KERNEL_OBJECT_TYPE = "KoTypeObligatory";

    /**
     * The path of the Memory Registry Controller kernel object.
     */
    const KERNEL_OBJECT_PATH = "/kernel/mem.ko";

    /**
     * Add data to the runtime memory registry.
     *
     * @param string $identifier The identifier for the data.
     * @param mixed $data The data to be stored.
     */
    public function mem_r_add(string $identifier, mixed $data): void
    {
        $pid = 1;

        if (isset($this->scope_task)) {
            $pid = $this->scope_task->__task_pid;
        }

        $this->kernel->put_var($data, 'mem_r', $pid, $identifier);
    }

    /**
     * Get data from the runtime memory registry.
     *
     * @param string $identifier The identifier for the data to retrieve.
     * @return mixed The retrieved data or false if not found.
     */
    public function mem_r_get(string $identifier, $default = null): mixed
    {
        $pid = 1;

        if (isset($this->scope_task)) {
            $pid = $this->scope_task->__task_pid;
        }

        if($return = $this->kernel->get_var('mem_r', $pid, $identifier))
            return $return;

        return $default;
    }

    /**
     * Add data to the kernel memory registry.
     *
     * @param string $identifier The identifier for the data.
     * @param mixed $data The data to be stored.
     */
    public function mem_k_add(string $identifier, mixed $data): void
    {
        $pid = 1;

        if (isset($this->scope_task)) {
            $pid = $this->scope_task->__task_pid;
        }

        $this->kernel->put_var($data, 'mem_k', $pid, $identifier);
    }

    /**
     * Get data from the kernel memory registry.
     *
     * @param string $identifier The identifier for the data to retrieve.
     * @return mixed The retrieved data or false if not found.
     */
    public function mem_k_get(string $identifier): mixed
    {
        $pid = 1;

        if (isset($this->scope_task)) {
            $pid = $this->scope_task->__task_pid;
        }

        return $this->kernel->get_var('mem_k', $pid, $identifier);
    }

    /**
     * Flush the runtime memory registry for a specific process ID.
     *
     * @param int $pid The process ID for which to flush the memory registry.
     */
    public function mem_r_flush(int $pid): void
    {
        $this->kernel->kill_var('mem_r', $pid);
    }

    /**
     * Flush the kernel memory registry for the current or specified process.
     */
    public function mem_k_flush(): void
    {
        $pid = 1;

        if (isset($this->scope_task)) {
            $pid = $this->scope_task->__task_pid;
        }

        $this->kernel->kill_var('mem_k', $pid);
    }
}
